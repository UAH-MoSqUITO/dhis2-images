---
- hosts: all
  become: yes
  tasks:
    - set_fact:
        dhis2versionfull: "{{ dhis2_version|default('2.32.0')}}"
    - set_fact:
        dhis2versionmajor: "{{ dhis2versionfull|regex_replace('^(\\d+\\.\\d+).*$','\\1') }}"
    - set_fact:
        dhis2wardisturl: "https://releases.dhis2.org/{{ dhis2versionmajor }}/{{ dhis2versionfull }}/dhis.war"
    - set_fact:
        dhisdbname: dhis2
        dhisdbuser: dhis
    - name: Prevent APT from starting services when installing packages
      copy:
        dest: /usr/sbin/policy-rc.d
        content: |
          #!/bin/sh
          exit 101
        mode: 0755
    - apt:
        update_cache: yes
        cache_valid_time: 86400
    - copy:
        dest: /usr/local/sbin/clean-for-ami
        content: |
          #!/bin/bash
          set -eu
          shopt -s nullglob
          cd /
          rm -rf \
            etc/ssh/*_key \
            etc/ssh/*_key.pub \
            etc/ssl/*/ssl-cert-snakeoil* \
            home/{{ ansible_user_id }}/.ansible \
            home/ubuntu/.ssh/authorized_keys \
            home/{{ ansible_user_id }}/~* \
            root/.ssh/authorized_keys \
            #
          # TODO truncate files under /var/log/
          # TODO clean cache
        mode: 0755
    - package:
        state: present
        name:
          - ansible
          - haproxy
          - openjdk-8-jdk
          - postgresql-10
          - postgresql-10-postgis-2.4
          - postgresql-contrib-10
          - python-psycopg2
          - python3-psycopg2
          - tomcat8
          - unzip
    - copy:
        dest: /etc/default/haproxy
        mode: 0644
        content: |
          CONFIG="/etc/haproxy"
    - copy:
        dest: /etc/haproxy/x.cfg
        mode: 0644
        content: |
          global
              ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
              ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
              ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
              ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
          listen x
              mode http
              bind :443 ssl crt ssl-cert-localhost.certkey
              bind :80
              http-response set-header Strict-Transport-Security max-age=15768000
              option forwardfor
              http-request set-header X-Forwarded-Port %[dst_port]
              http-request set-header X-Forwarded-Proto https if { ssl_fc }
              http-request set-header X-Forwarded-Host %[req.hdr(Host)]
              redirect scheme https code 301 if !{ ssl_fc }
              server tomcat 127.0.0.1:8080
    - copy:
        dest: /usr/local/sbin/make-ssl-cert-localhost
        mode: 0755
        content: |
          #!/bin/bash
          set -eu
          name=localhost
          key=/etc/ssl/private/ssl-cert-$name.key
          cert=/etc/ssl/certs/ssl-cert-$name.pem
          certkey=/etc/ssl/private/ssl-cert-$name.certkey
          umask 077
          openssl req -x509 -newkey rsa:4096 -keyout "$key" -out "$cert" -days 365 -nodes -subj "/CN=$name"
          cat "$cert" "$key" > "$certkey"
    - copy:
        dest: /etc/systemd/system/make-ssl-cert-localhost.service
        mode: 0644
        content: |
          [Unit]
          Description=Create localhost certificate
          After=network.target
          Before=haproxy.service postgresql@10-main.service
          ConditionPathExists=!/etc/ssl/private/ssl-cert-localhost.certkey

          [Service]
          Type=oneshot
          ExecStart=/usr/local/sbin/make-ssl-cert-localhost

          [Install]
          WantedBy=multi-user.target
    - service:
        name: make-ssl-cert-localhost
        enabled: yes
    - copy:
        dest: /etc/postgresql/10/main/conf.d/dhis2.conf
        mode: 0644
        content: |
          # Avoid "out of shared memory" error for DHIS2
          max_locks_per_transaction = 1024
          # Do not use ssl, since certificate reset is confusing
          ssl = off
    - service:
        name: postgresql
        state: started
    - wait_for:
        state: started
        port: 5432
    - block:
        - postgresql_user:
            state: present
            name: "{{ dhisdbuser }}"
            role_attr_flags: NOCREATEDB,NOCREATEROLE,LOGIN,NOSUPERUSER
        - postgresql_db:
            state: present
            name: "{{ dhisdbname }}"
            owner: "{{ dhisdbuser }}"
        - postgresql_ext:
            state: present
            db: "{{ dhisdbname }}"
            name: postgis
      become_user: postgres
    - file:
    # The ROOT webapp directory must exist before tomcat8 gets installed
    # or else the postinst script will put default files there.
        state: directory
        path: /var/lib/tomcat8/webapps/ROOT
    - unarchive:
    # The unarchive module uses unzip for war files
        remote_src: yes
        src: "{{ dhis2wardisturl }}"
        dest: /var/lib/tomcat8/webapps/ROOT
        creates: /var/lib/tomcat8/webapps/ROOT/main.vm
    - file:
        state: directory
        path: /etc/dhis
        mode: 0775
        owner: root
        group: tomcat8
    - file:
        state: directory
        path: /etc/dhis/credentials
        mode: 0700
        owner: "{{ ansible_user_id }}"
    - copy:
        src: playbook-credentials.yml
        dest: /etc/dhis/playbook-credentials.yml
        mode: 0644
    - copy:
        src: templates/dhis.conf.j2
        dest: /etc/dhis/dhis.conf.j2
        mode: 0644
    - copy:
        dest: /etc/systemd/system/initialize-dhis-credentials.service
        mode: 0644
        content: |
          [Unit]
          After=postgresql.service
          Before=tomcat8.service
          ConditionPathExists=!/etc/dhis/dhis.conf

          [Service]
          Type=oneshot
          User={{ ansible_user_id }}
          ExecStart=/usr/bin/ansible-playbook -i "localhost ansible_connection=local," /etc/dhis/playbook-credentials.yml

          [Install]
          WantedBy=multi-user.target
    - service:
        name: initialize-dhis-credentials
        enabled: yes
    - blockinfile:
        state: present
        path: /etc/default/tomcat8
        insertafter: EOF
        block: |
          # Java 9+ cause problems for JAXB modules
          JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64

          # Location of DHIS2 configuration
          DHIS2_HOME=/etc/dhis

# TODO:
# - register tomcat as service
# - import Sierra Leone data
# - configure Google service account
# - ???

# Start with Ubuntu minimal (ubuntu-minimal/images/hvm-ssd/ubuntu-bionic-18.04-amd64-minimal-20190514)
# (Maybe?) Add "don't start services" /usr/sbin/policy-rc.d (exit 101)
# apt get update && apt get upgrade
# Install packages
# Add haproxy configuration file, reverse proxy to tomcat
# Add dhis2 war file
# Add sample data file
# Add dhis2 config file
# Add database role
# Add database
# Import sample data
# Add firstboot script
# - Regenerate snakeoil cert
# - Generate random database password
# - Generate random encryption password
# - Change database password
# - Update dhis2 config file
